name: Build and Deploy .NET Application to AWS EC2

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Setup .NET
      uses: actions/setup-dotnet@v2
      with:
        dotnet-version: '7.x'

    - name: Restore dependencies
      run: dotnet restore

    - name: Build
      run: dotnet build --configuration Release --no-restore

    - name: Publish
      run: dotnet publish --configuration Release --no-restore --output ./out

    - name: Log in to Amazon ECR
      id: ecr-login
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build Docker image
      run: docker build -t my-app:latest .

    - name: Tag Docker image
      run: docker tag my-app:latest <aws_account_id>.dkr.ecr.<region>.amazonaws.com/my-app:latest

    - name: Push Docker image to ECR
      run: docker push <aws_account_id>.dkr.ecr.<region>.amazonaws.com/my-app:latest

  deploy:
    runs-on: ubuntu-latest
    needs: build

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Install SSH client
      run: sudo apt-get install -y openssh-client

    - name: SSH and deploy
      env:
        ECR_REGISTRY: <aws_account_id>.dkr.ecr.<region>.amazonaws.com
        IMAGE_NAME: my-app:latest
        EC2_INSTANCE: <ec2_instance_ip>
        SSH_PRIVATE_KEY: ${{ secrets.EC2_SSH_KEY }}
      run: |
        echo "${SSH_PRIVATE_KEY}" > private_key.pem
        chmod 600 private_key.pem
        ssh -o StrictHostKeyChecking=no -i private_key.pem ec2-user@${EC2_INSTANCE} << 'EOF'
          docker login -u AWS -p $(aws ecr get-login-password --region <region>) ${ECR_REGISTRY}
          docker pull ${ECR_REGISTRY}/${IMAGE_NAME}
          docker stop my-app || true
          docker rm my-app || true
          docker run -d --name my-app -p 80:80 ${ECR_REGISTRY}/${IMAGE_NAME}
        EOF
